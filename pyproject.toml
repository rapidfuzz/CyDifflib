[build-system]
requires = [
    "scikit-build-core>=0.11",
    "Cython>=3.0.12,<3.1.0"
]
build-backend = "scikit_build_core.build"

[project]
name = "cydifflib"
dynamic = ["version"]
requires-python = ">= 3.9"
authors = [
  {name = "Max Bachmann", email = "pypi@maxbachmann.de"},
]
maintainers = [
  {name = "Max Bachmann", email = "pypi@maxbachmann.de"},
]
description = "Fast implementation of difflib's algorithms"
readme = "README.md"
license = "MIT"
classifiers=[
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[project.urls]
Homepage = "https://github.com/rapidfuzz/CyDifflib"
Repository = "https://github.com/rapidfuzz/CyDifflib.git"
Issues = "https://github.com/rapidfuzz/CyDifflib/issues"
Changelog = "https://github.com/rapidfuzz/CyDifflib/blob/main/CHANGELOG.md"

[tool.scikit-build]
sdist.include = [
  "src/cydifflib/*.cxx",
]
sdist.exclude = [
  ".github"
]
wheel.exclude = [
  "**.pyx",
  "**.cxx",
  "**.cpp",
  "**.hpp",
  "CMakeLists.txt",
  "generate.sh"
]

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "src/cydifflib/__init__.py"

[tool.black]
line-length = 120

[tool.mypy]
files = ["src"]
python_version = "3.8"
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
norecursedirs = ["_skbuild"]
xfail_strict = true
log_cli_level = "info"

[tool.pylint]
py-version = "3.8"

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.messages_control]
disable = [
  "design",
  "fixme",
  "imports",
  "line-too-long",
  "imports",
  "invalid-name",
  "protected-access",
  "missing-module-docstring",
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "PTH123", # use pathlib instead of builtin open

  "F403", # todo we should do better in the future
  "RUF001", # this simply leads to incorrect code

  "PT027" # we want to keep the test code close to the one in cpython
]
target-version = "py37"
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20", "PT009", "ARG001", "PTH118", "PTH120"]
"bench/**" = ["T20"]
"setup.py" = ["T20"]
